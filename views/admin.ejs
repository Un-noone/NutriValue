<!DOCTYPE html>
<html>
<head>
  <title>Admin Portal - Real-time Management</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body { font-family: 'Inter', sans-serif; }
    .status-transition { transition: all 0.3s ease; }
    .success-flash { animation: flashGreen 0.6s ease; }
    .error-flash { animation: flashRed 0.6s ease; }
    @keyframes flashGreen { 0%, 100% { background-color: transparent; } 50% { background-color: rgb(34, 197, 94, 0.2); } }
    @keyframes flashRed { 0%, 100% { background-color: transparent; } 50% { background-color: rgb(239, 68, 68, 0.2); } }
    .loading { opacity: 0.6; pointer-events: none; }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div class="container mx-auto p-6 max-w-6xl">
    <!-- Header -->
    <header class="mb-8 flex items-center justify-between">
      <div>
        <h2 class="text-3xl font-bold text-blue-700">Admin Portal</h2>
        <p class="text-gray-600 mt-1">Real-time User Management</p>
      </div>
      <div class="flex items-center space-x-4">
        <button onclick="refreshUsers()" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors" id="refresh-btn">
          <span id="refresh-text">üîÑ Refresh</span>
        </button>
        <a href="/admin/logout" class="text-red-500 hover:text-red-700 font-semibold px-4 py-2 rounded-lg border border-red-300 hover:bg-red-50 transition-colors duration-300">Logout</a>
      </div>
    </header>

    <!-- Success/Error Messages -->
    <div id="message-container" class="mb-6 hidden">
      <div id="success-message" class="hidden bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg mb-4">
        <div class="flex items-center">
          <span class="text-green-500 mr-2">‚úÖ</span>
          <span id="success-text"></span>
        </div>
      </div>
      <div id="error-message" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg mb-4">
        <div class="flex items-center">
          <span class="text-red-500 mr-2">‚ùå</span>
          <span id="error-text"></span>
        </div>
      </div>
    </div>

    <!-- Stats Dashboard -->
    <div class="bg-white rounded-lg shadow-lg p-6 mb-6">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4" id="stats-container">
        <div class="bg-blue-50 p-4 rounded-lg text-center">
          <div class="text-3xl font-bold text-blue-700" id="total-users"><%= users.length %></div>
          <div class="text-sm text-blue-600">Total Users</div>
        </div>
        <div class="bg-green-50 p-4 rounded-lg text-center">
          <div class="text-3xl font-bold text-green-700" id="active-users"><%= users.filter(u => !u.disabled).length %></div>
          <div class="text-sm text-green-600">Active Users</div>
        </div>
        <div class="bg-yellow-50 p-4 rounded-lg text-center">
          <div class="text-3xl font-bold text-yellow-700" id="subscribers"><%= users.filter(u => u.subscription).length %></div>
          <div class="text-sm text-yellow-600">Subscribers</div>
        </div>
        <div class="bg-red-50 p-4 rounded-lg text-center">
          <div class="text-3xl font-bold text-red-700" id="deactivated-users"><%= users.filter(u => u.disabled).length %></div>
          <div class="text-sm text-red-600">Deactivated</div>
        </div>
      </div>
    </div>
    
    <!-- Users Table -->
    <div class="bg-white rounded-lg shadow-lg p-6">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-xl font-semibold text-gray-800">User Management</h3>
        <div class="text-sm text-gray-500">
          Last updated: <span id="last-updated">Now</span>
        </div>
      </div>
      
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-blue-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">User Info</th>
              <th class="px-4 py-3 text-center text-xs font-semibold text-gray-700 uppercase tracking-wider">Status</th>
              <th class="px-4 py-3 text-center text-xs font-semibold text-gray-700 uppercase tracking-wider">Subscription</th>
              <th class="px-6 py-3 text-center text-xs font-semibold text-gray-700 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-100" id="users-tbody">
            <% users.forEach(user => { %>
              <tr id="user-row-<%= user.uid %>" class="hover:bg-gray-50 status-transition">
                <td class="px-6 py-4">
                  <div>
                    <div class="text-sm font-medium text-gray-900"><%= user.email %></div>
                    <div class="text-sm text-gray-500">UID: <%= user.uid.substring(0, 8) %>...</div>
                    <% if (user.name) { %>
                      <div class="text-sm text-gray-500">Name: <%= user.name %></div>
                    <% } %>
                  </div>
                </td>
                <td class="px-4 py-4 text-center">
                  <span id="status-badge-<%= user.uid %>" class="<%= user.disabled ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700' %> inline-block px-3 py-1 rounded-full text-xs font-semibold status-transition">
                    <%= user.disabled ? 'Deactivated' : 'Active' %>
                  </span>
                </td>
                <td class="px-4 py-4 text-center">
                  <span id="subscription-badge-<%= user.uid %>" class="<%= user.subscription ? 'bg-green-100 text-green-700' : 'bg-gray-200 text-gray-700' %> inline-block px-3 py-1 rounded-full text-xs font-semibold status-transition">
                    <%= user.subscription ? 'Pro Member' : 'Free' %>
                  </span>
                </td>
                <td class="px-6 py-4">
                  <div class="flex justify-center space-x-2" id="actions-<%= user.uid %>">
                    <button 
                      onclick="toggleUserStatus('<%= user.uid %>', <%= !user.disabled %>)" 
                      class="<%= user.disabled ? 'bg-green-500 hover:bg-green-600' : 'bg-orange-500 hover:bg-orange-600' %> text-white px-3 py-1 rounded text-xs font-semibold transition-colors status-transition"
                      id="toggle-btn-<%= user.uid %>">
                      <%= user.disabled ? 'Activate' : 'Deactivate' %>
                    </button>
                    <button 
                      onclick="toggleSubscription('<%= user.uid %>', <%= !user.subscription %>)" 
                      class="<%= user.subscription ? 'bg-yellow-500 hover:bg-yellow-600' : 'bg-blue-500 hover:bg-blue-600' %> text-white px-3 py-1 rounded text-xs font-semibold transition-colors"
                      id="subscription-btn-<%= user.uid %>">
                      <%= user.subscription ? 'Revoke Pro' : 'Grant Pro' %>
                    </button>
                    <button 
                      onclick="deleteUser('<%= user.uid %>')" 
                      class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-xs font-semibold transition-colors"
                      id="delete-btn-<%= user.uid %>">
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Real-time Action Modal -->
  <div id="action-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg shadow-xl max-w-md w-full mx-4">
      <h3 class="text-lg font-semibold mb-4" id="modal-title">Confirm Action</h3>
      <p class="text-gray-600 mb-6" id="modal-message"></p>
      <div class="flex justify-end space-x-3">
        <button onclick="closeModal()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition-colors">Cancel</button>
        <button onclick="confirmAction()" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors" id="modal-confirm-btn">Confirm</button>
      </div>
    </div>
  </div>

  <script>
    let currentAction = null;
    let usersData = <%- JSON.stringify(users) %>;

    // Show success message
    function showSuccess(message) {
      document.getElementById('success-text').textContent = message;
      document.getElementById('success-message').classList.remove('hidden');
      document.getElementById('error-message').classList.add('hidden');
      document.getElementById('message-container').classList.remove('hidden');
      setTimeout(() => {
        document.getElementById('message-container').classList.add('hidden');
      }, 4000);
    }

    // Show error message
    function showError(message) {
      document.getElementById('error-text').textContent = message;
      document.getElementById('error-message').classList.remove('hidden');
      document.getElementById('success-message').classList.add('hidden');
      document.getElementById('message-container').classList.remove('hidden');
      setTimeout(() => {
        document.getElementById('message-container').classList.add('hidden');
      }, 4000);
    }

    // Update statistics
    function updateStats() {
      const activeUsers = usersData.filter(u => !u.disabled).length;
      const subscribers = usersData.filter(u => u.subscription).length;
      const deactivatedUsers = usersData.filter(u => u.disabled).length;
      
      document.getElementById('total-users').textContent = usersData.length;
      document.getElementById('active-users').textContent = activeUsers;
      document.getElementById('subscribers').textContent = subscribers;
      document.getElementById('deactivated-users').textContent = deactivatedUsers;
    }

    // Update user row
    function updateUserRow(uid, userData) {
      const statusBadge = document.getElementById(`status-badge-${uid}`);
      const subscriptionBadge = document.getElementById(`subscription-badge-${uid}`);
      const toggleBtn = document.getElementById(`toggle-btn-${uid}`);
      const subscriptionBtn = document.getElementById(`subscription-btn-${uid}`);
      const userRow = document.getElementById(`user-row-${uid}`);

      // Update status badge
      if (userData.disabled) {
        statusBadge.className = 'bg-red-100 text-red-700 inline-block px-3 py-1 rounded-full text-xs font-semibold status-transition';
        statusBadge.textContent = 'Deactivated';
        toggleBtn.className = 'bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded text-xs font-semibold transition-colors';
        toggleBtn.textContent = 'Activate';
      } else {
        statusBadge.className = 'bg-green-100 text-green-700 inline-block px-3 py-1 rounded-full text-xs font-semibold status-transition';
        statusBadge.textContent = 'Active';
        toggleBtn.className = 'bg-orange-500 hover:bg-orange-600 text-white px-3 py-1 rounded text-xs font-semibold transition-colors';
        toggleBtn.textContent = 'Deactivate';
      }

      // Update subscription badge
      if (userData.subscription) {
        subscriptionBadge.className = 'bg-green-100 text-green-700 inline-block px-3 py-1 rounded-full text-xs font-semibold status-transition';
        subscriptionBadge.textContent = 'Pro Member';
        subscriptionBtn.className = 'bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded text-xs font-semibold transition-colors';
        subscriptionBtn.textContent = 'Revoke Pro';
      } else {
        subscriptionBadge.className = 'bg-gray-200 text-gray-700 inline-block px-3 py-1 rounded-full text-xs font-semibold status-transition';
        subscriptionBadge.textContent = 'Free';
        subscriptionBtn.className = 'bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-xs font-semibold transition-colors';
        subscriptionBtn.textContent = 'Grant Pro';
      }

      // Flash effect
      userRow.classList.add('success-flash');
      setTimeout(() => userRow.classList.remove('success-flash'), 600);

      // Update onclick handlers
      toggleBtn.onclick = () => toggleUserStatus(uid, !userData.disabled);
      subscriptionBtn.onclick = () => toggleSubscription(uid, !userData.subscription);
    }

    // Toggle user status
    async function toggleUserStatus(uid, disable) {
      const user = usersData.find(u => u.uid === uid);
      if (!user) return;

      try {
        // Show loading state
        const toggleBtn = document.getElementById(`toggle-btn-${uid}`);
        const originalText = toggleBtn.textContent;
        toggleBtn.textContent = '...';
        toggleBtn.disabled = true;

        const response = await fetch(`/admin/user/${uid}/toggle`, {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({disable})
        });

        const result = await response.json();

        if (result.success) {
          // Update local data
          user.disabled = disable;
          updateUserRow(uid, user);
          updateStats();
          
          const action = disable ? 'deactivated' : 'activated';
          showSuccess(`User account has been ${action} successfully. The user will be notified on their next login attempt.`);
        } else {
          throw new Error('Failed to update user status');
        }
      } catch (error) {
        showError(`Failed to update user status: ${error.message}`);
        // Reset button
        const toggleBtn = document.getElementById(`toggle-btn-${uid}`);
        toggleBtn.disabled = false;
        toggleBtn.textContent = user.disabled ? 'Activate' : 'Deactivate';
      }
    }

    // Toggle subscription
    async function toggleSubscription(uid, subscribe) {
      const user = usersData.find(u => u.uid === uid);
      if (!user) return;

      try {
        // Show loading state
        const subscriptionBtn = document.getElementById(`subscription-btn-${uid}`);
        const originalText = subscriptionBtn.textContent;
        subscriptionBtn.textContent = '...';
        subscriptionBtn.disabled = true;

        const response = await fetch(`/admin/user/${uid}/subscription`, {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({subscribe})
        });

        const result = await response.json();

        if (result.success) {
          // Update local data
          user.subscription = subscribe;
          updateUserRow(uid, user);
          updateStats();
          
          const action = subscribe ? 'granted Pro subscription to' : 'revoked Pro subscription from';
          showSuccess(`Successfully ${action} the user. Changes will be reflected immediately.`);
        } else {
          throw new Error('Failed to update subscription');
        }
      } catch (error) {
        showError(`Failed to update subscription: ${error.message}`);
        // Reset button
        const subscriptionBtn = document.getElementById(`subscription-btn-${uid}`);
        subscriptionBtn.disabled = false;
        subscriptionBtn.textContent = user.subscription ? 'Revoke Pro' : 'Grant Pro';
      }
    }

    // Delete user with confirmation
    function deleteUser(uid) {
      const user = usersData.find(u => u.uid === uid);
      if (!user) return;

      currentAction = {
        type: 'delete',
        uid: uid,
        email: user.email
      };

      document.getElementById('modal-title').textContent = 'Delete User Account';
      document.getElementById('modal-message').textContent = `Are you sure you want to permanently delete the account for "${user.email}"? This action cannot be undone.`;
      document.getElementById('modal-confirm-btn').textContent = 'Delete';
      document.getElementById('modal-confirm-btn').className = 'px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors';
      document.getElementById('action-modal').classList.remove('hidden');
    }

    // Confirm modal action
    async function confirmAction() {
      if (!currentAction) return;

      try {
        closeModal();
        
        if (currentAction.type === 'delete') {
          const response = await fetch(`/admin/user/${currentAction.uid}/delete`, {
            method: 'POST'
          });

          const result = await response.json();

          if (result.success) {
            // Remove user from local data and DOM
            usersData = usersData.filter(u => u.uid !== currentAction.uid);
            document.getElementById(`user-row-${currentAction.uid}`).remove();
            updateStats();
            showSuccess(`User account "${currentAction.email}" has been permanently deleted.`);
          } else {
            throw new Error('Failed to delete user');
          }
        }
      } catch (error) {
        showError(`Failed to complete action: ${error.message}`);
      }

      currentAction = null;
    }

    // Close modal
    function closeModal() {
      document.getElementById('action-modal').classList.add('hidden');
      currentAction = null;
    }

    // Refresh users data
    async function refreshUsers() {
      const refreshBtn = document.getElementById('refresh-btn');
      const refreshText = document.getElementById('refresh-text');
      
      try {
        refreshText.textContent = 'üîÑ Refreshing...';
        refreshBtn.disabled = true;
        
        // Simply reload the page for now - you could make this an AJAX call
        window.location.reload();
      } catch (error) {
        showError('Failed to refresh user data');
        refreshText.textContent = 'üîÑ Refresh';
        refreshBtn.disabled = false;
      }
    }

    // Update last updated time
    function updateLastUpdated() {
      document.getElementById('last-updated').textContent = new Date().toLocaleTimeString();
    }

    // Initialize
    updateLastUpdated();
    setInterval(updateLastUpdated, 30000); // Update every 30 seconds
  </script>
</body>
</html>